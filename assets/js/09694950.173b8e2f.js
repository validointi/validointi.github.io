"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[934],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(a),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1387:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2,title:"Core concepts",description:"Understand the core concepts of  validointi."},o="Core Concept",l={unversionedId:"core_concept",id:"core_concept",title:"Core concepts",description:"Understand the core concepts of  validointi.",source:"@site/docs/core_concept.md",sourceDirName:".",slug:"/core_concept",permalink:"/docs/core_concept",draft:!1,editUrl:"https://github.com/validointi/validointi/tree/main/packages/create-docusaurus/templates/shared/docs/core_concept.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Core concepts",description:"Understand the core concepts of  validointi."},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/getting_started"}},s={},p=[{value:"Model",id:"model",level:2},{value:"Validation library",id:"validation-library",level:2},{value:"Hookup the lib Validointi",id:"hookup-the-lib-validointi",level:2},{value:"Using the Validointi",id:"using-the-validointi",level:2},{value:"Test suite",id:"test-suite",level:3},{value:"Validation function",id:"validation-function",level:3},{value:"Example app",id:"example-app",level:3}],c={toc:p};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"core-concept"},"Core Concept"),(0,r.kt)("p",null,"The core concept of Validointi is that you use a model, a validation library by your choice and ",(0,r.kt)("strong",{parentName:"p"},"one")," directive that will make your template form have super powers."),(0,r.kt)("h2",{id:"model"},"Model"),(0,r.kt)("p",null,"A model contains information and it shouldn't have any behavior. This model contains the information that we will use in our form. Below an example off a simple model that represants a simple form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"{\n    name: 'Your name',\n    email: 'info@example.org',\n    password: 'a-p-a-s-s-w-o-r-d'\n    confirmPassword: 'a-p-a-s-s-w-o-r-d'\n}\n")),(0,r.kt)("h2",{id:"validation-library"},"Validation library"),(0,r.kt)("p",null,"When using Angular we have a set off default validators like: ",(0,r.kt)("inlineCode",{parentName:"p"},"required"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"min"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"max"),". These are HTML5 validations hooked up to Angular, Angular uses several directives to support these validations in template driven forms.\nWhen a form is getting ",(0,r.kt)("strong",{parentName:"p"},"more"),' complex we need custom "validation", here it is where validation librarys come in. Validation library have a purpose, make validation easy! There is a brought set of validation / schema validator libraries, below a set of libraries that could be intressting, in our documentation we always will look at ',(0,r.kt)("a",{parentName:"p",href:"https://vestjs.dev"},"Vest"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://vestjs.dev"},"Vest")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://joi.dev"},"Joi")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://ajv.js.org"},"Ajv"))),(0,r.kt)("h2",{id:"hookup-the-lib-validointi"},"Hookup the lib Validointi"),(0,r.kt)("p",null,"Now that we have a basic concept of a model and a validation library we wil explain how to hookup the library to a form.\nFirst we are going to install ",(0,r.kt)("a",{parentName:"p",href:"https://vestjs.dev"},"Vest"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install vest\n")),(0,r.kt)("p",null,"Now install the library"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @validointi/core\n")),(0,r.kt)("h2",{id:"using-the-validointi"},"Using the Validointi"),(0,r.kt)("p",null,"When everything is installed we are ready to use the library in our project.\nValidointi canbe used (as mentioned) with a variaty of different schema/ model validators. We are using Vest in our example and Vest leans on a test suite so let us write a test suite that we can add to the form."),(0,r.kt)("h3",{id:"test-suite"},"Test suite"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const suite = create((data = {}) => {\n  test("name", "Name is required", () => {\n    enforce(data.name).isNotBlank();\n  });\n\n  test("name", "Name must be at least 3 characters long", () => {\n    enforce(data.name).longerThan(2);\n  });\n});\n')),(0,r.kt)("p",null,"To use this ",(0,r.kt)("inlineCode",{parentName:"p"},"suite")," we need to register it to the library. This will go into two steps."),(0,r.kt)("p",null,"Step one, make a generic function that is called by the library when validation is needed. This function has the purpose to call the model validation and map the errors to ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise<ValidationErrors>")),(0,r.kt)("h3",{id:"validation-function"},"Validation function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"async function validateSampleData(data: any): Promise<ValidationErrors> {\n  const errors = await suite(data).getErrors();\n  return Object.entries(errors).reduce((acc, [key, err]) => {\n    acc[key] = err;\n    return acc;\n  }, {} as ValidationErrors);\n}\n")),(0,r.kt)("p",null,"We can now safely register our validation function to our validation registery.\nThe validation registry is a place where N validation functions live ready to validate a specific set of data.\nRegistering a validation function is easy, just inject the registry and call ",(0,r.kt)("inlineCode",{parentName:"p"},"registerValidator")," where you put in a unique key and the validation function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'#vr = inject(ValidatorRegistryService);\n\nvalidate = this.#vr.registerValidator("sample-data", validateSampleData);\n')),(0,r.kt)("p",null,"Add the ",(0,r.kt)("inlineCode",{parentName:"p"},"ValidatorDirective")," to the module/ standalone component."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"...\nimport { ValidatorDirective } from '@validointi/core';\n\n    imports: [CommonModule, FormsModule, ValidatorDirective],\n")),(0,r.kt)("p",null,"And we are done, now open up a browser and navigate to the application.\nChange the default ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," value to a empty string and see the red border appear.\nIf we now look at the control is self we will see that it contains an error."),(0,r.kt)("h3",{id:"example-app"},"Example app"),(0,r.kt)("iframe",{height:"500",style:{width:"100%"},src:"https://stackblitz.com/edit/ng-webcontainer-h4kxce?ctl=1&embed=1&file=src/app/template-form/template-form.component.ts"}))}d.isMDXComponent=!0}}]);